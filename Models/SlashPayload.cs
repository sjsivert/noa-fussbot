// Generated by https://quicktype.io

namespace vscodecore.Models
{
    using System;
    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
// Class for Slack slashcommand payload
    public partial class SlashPayload
    {
        public SlashPayload()
        {
           
        }
        public string token { get; set; }
        public string team_id { get; set; }
        public string enterprise_id { get; set; }
        public string channel_id { get; set; }
        public string channel_name { get; set; }
        public string user_id { get; set; }
        public string user_name { get; set; }
        public string command { get; set; }
        public string text { get; set; }
        public Uri response_url { get; set; }
        public string trigger_id { get; set; }
    }
// Probably don't need anything below ___
    public partial class SlashPayload
    {
        public static SlashPayload FromJson(string json) => JsonConvert.DeserializeObject<SlashPayload>(json, vscodecore.Models.Converter.Settings);
    }

    public static class Serialize2
    {
        public static string ToJson(this SlashPayload self) => JsonConvert.SerializeObject(self, vscodecore.Models.Converter.Settings);
    }

    internal static class Converter2
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters = {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
